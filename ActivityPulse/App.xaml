<Application x:Class="ActivityPulse.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ActivityPulse"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:prop="clr-namespace:ActivityPulse.Settings"
             StartupUri="MainWindow.xaml">
    
    <Application.Resources>
        <sys:String x:Key="WindowTitle">Activity Pulse</sys:String>
        
        <FontFamily x:Key="FAsolid">/Fonts/FAsolid900.otf#Font Awesome 6 Free Solid</FontFamily>
        <FontFamily x:Key="FAbrands">/Fonts/FAbrands.otf#Font Awesome 6 Brands Regular</FontFamily>
        <FontFamily x:Key="FAregular">/Fonts/FAregular.otf#Font Awesome 6 Free Regular</FontFamily>
        <FontFamily x:Key="Nunito">/Resources/Fonts/Nunito.ttf#Nunito</FontFamily>

        <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
        <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>

        <SolidColorBrush x:Key="DarkBackground" Color="#ff121212"/>
        <SolidColorBrush x:Key="DarkMenu" Color="#1e1e1e" />
        <SolidColorBrush x:Key="DarkSecondMenu" Color="#1a1a1a" />
        <SolidColorBrush x:Key="DarkMiddleground" Color="#282828"/>
        <SolidColorBrush x:Key="DarkForeground" Color="White"/>

        <SolidColorBrush x:Key="LightBackground" Color="White"/>
        <SolidColorBrush x:Key="LightMenu" Color="#f2f2f2" />
        <SolidColorBrush x:Key="LightSecondMenu" Color="#eeeeee" />
        <SolidColorBrush x:Key="LightMiddleground" Color="#e5e5e5"/>
        <SolidColorBrush x:Key="LightForeground" Color="#ff373737"/>

        <Color x:Key="AccentColor">Lime</Color>
        <SolidColorBrush x:Key="AccentBrush" Color="{DynamicResource AccentColor}" />

        <Color x:Key="ThemeAccentColorL" >#000</Color>
        <Color x:Key="ThemeAccentColorD" >#000</Color>
        <SolidColorBrush x:Key="ThemeBackground" Color="#000" />
        <SolidColorBrush x:Key="ThemeMenu" Color="#000" />
        <SolidColorBrush x:Key="ThemeSecondMenu" Color="#000" />
        <SolidColorBrush x:Key="ThemeMiddleground" Color="#000" />
        <SolidColorBrush x:Key="ThemeForeground" Color="#000" />
        <SolidColorBrush x:Key="ThemeAccentD" Color="#000" />
        <SolidColorBrush x:Key="ThemeAccentL" Color="#000" />



        <!--COLROS-->
        <Color x:Key="WindowColor">#FFE8EDF9</Color>
        <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
        <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>
        <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
        <Color x:Key="DisabledForegroundColor">#FF888888</Color>
        <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
        <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
        <Color x:Key="ControlLightColor">White</Color>
        <Color x:Key="ControlMediumColor">#FF7381F9</Color>
        <Color x:Key="ControlDarkColor">#FF211AA9</Color>
        <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
        <Color x:Key="ControlPressedColor">#FF211AA9</Color>
        <Color x:Key="GlyphColor">#FF444444</Color>
        <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>
        <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
        <Color x:Key="BorderMediumColor">#FF888888</Color>
        <Color x:Key="BorderDarkColor">#FF444444</Color>
        <Color x:Key="PressedBorderLightColor">#FF888888</Color>
        <Color x:Key="PressedBorderDarkColor">#FF444444</Color>
        <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>
        <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>
        <Color x:Key="HoverColor">LightBlue</Color>
        <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
        <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
        <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
        <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>
        


        <!--Styles-->
        <!--======================================-->

        <!--BORDERS-->
        <!--========================================-->
        <Style x:Key="Stroke" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="#ff909090" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Border" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Bar" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="#ff282828" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeAccentD}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BdrBackground" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BorderMiddleground" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMiddleground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightMiddleground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeMiddleground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BorderSecondMenu" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkSecondMenu}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightSecondMenu}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeSecondMenu}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="AccentBorder" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource AccentBrush}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource AccentBrush}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource AccentBrush}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--welcomeborder-->
        <LinearGradientBrush StartPoint="1,0" EndPoint="0,1" x:Key="LinearBrushDark">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.0" Color="DeepSkyBlue" />
                <GradientStop Offset="1.0" Color="{x:Static SystemParameters.WindowGlassColor}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush StartPoint="0,1" EndPoint="1,0" x:Key="LinearBrushLight">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.0" Color="DeepSkyBlue" />
                <GradientStop Offset="1.0" Color="{x:Static SystemParameters.WindowGlassColor}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush StartPoint="0,1" EndPoint="1,0" x:Key="LinearBrushTheme">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.0" Color="{DynamicResource ThemeAccentColorL}" />
                <GradientStop Offset="1.0" Color="{DynamicResource ThemeAccentColorD}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <Style x:Key="Welcome" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource LinearBrushDark}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LinearBrushLight}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource LinearBrushTheme}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--BUTTONS-->
        <!--========================================-->
        <Style TargetType="Button" x:Key="AddBtn">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="5" BorderThickness="0" Background="#ba2211">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="CadetBlue"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="#7f8c8d"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="CustomButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="8" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Border x:Name="bg" Opacity="0.2" CornerRadius="5" />
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource DarkMenu}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="AccentColorButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="8" BorderThickness="2" Background="Transparent">
                            <Grid>
                                <Border x:Name="bg" Opacity="0.2" CornerRadius="5" BorderThickness="0" />
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource AccentBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource AccentBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource AccentBrush}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CustomWindowBTN" TargetType="Button">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="bdr" Background="Transparent">
                            <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" FillBehavior="HoldEnd" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#7f8c8d" />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="White"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"  />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CustomWindowCloseBTN" TargetType="Button">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="bdr" Background="Transparent" >
                            <ContentPresenter x:Name="content"  Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#c0392b" />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="content" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="White"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"  />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="content" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="LinkButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="10" Background="Transparent">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="DarkGray"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#9e9e9e"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="navButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr" CornerRadius="8" BorderThickness="0" Background="{TemplateBinding Background}">
                            <Viewbox HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Viewbox>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="CadetBlue"  />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="White"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"  />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="QuickButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="15" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Grid>
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <Border x:Name="bdr_type" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="10" Padding="8,3" CornerRadius="8">
                                    <TextBlock x:Name="TypeText" Text="{TemplateBinding Tag}" />
                                </Border>
                                <Border x:Name="bdr" Background="Transparent" CornerRadius="15" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr" Storyboard.TargetProperty="Background.Color" To="#90959595"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>

                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_type" Value="#FF404040" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_type" Value="{DynamicResource LightMenu}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_type" Value="{DynamicResource ThemeBackground}" />
                            </DataTrigger>

                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="RoundBtn">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="25" BorderThickness="0" >
                            <Grid>
                                <Border x:Name="bdr" CornerRadius="25" Opacity="0.4" />
                                <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Opacity" TargetName="bdr" Value="0.8" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="Background" TargetName="bdr" Value="{DynamicResource AccentBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Background" TargetName="bdr" Value="{DynamicResource AccentBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr" Value="{DynamicResource AccentBrush}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="RoundableCustomButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="16" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="CadetBlue"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="#7f8c8d"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="modernNavButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr" CornerRadius="20" Background="Transparent" >
                            <Grid>
                                <Border x:Name="bg" Opacity="0.2" CornerRadius="20" />
                                <Viewbox HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Viewbox>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="#7f8c8d" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--CALENDAR-->
        <!--========================================-->

        <!--Style for the days of a month.-->
        <Style TargetType="CalendarDayButton" x:Key="CalendarDayButtonStyle">
            <Setter Property="MinWidth" Value="5" />
            <Setter Property="MinHeight" Value="5" />
            <Setter Property="FontSize" Value="11" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CalendarDayButton">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.1" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="Normal" />
                                    <VisualState Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                            <DoubleAnimation Storyboard.TargetName="NormalText" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="SelectionStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="Unselected" />
                                    <VisualState Name="Selected">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="CalendarButtonFocusStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="CalendarButtonFocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="CalendarButtonUnfocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Collapsed</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="ActiveStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="Active" />
                                    <VisualState Name="Inactive">
                                        <Storyboard>
                                            <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF777777" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="DayStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="RegularDay" />
                                    <VisualState Name="Today">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                            <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FFFFFFFF" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="BlackoutDayStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="NormalDay" />
                                    <VisualState Name="BlackoutDay">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="Blackout" Storyboard.TargetProperty="Opacity" To=".2" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="TodayBackground" RadiusX="3" RadiusY="3" Opacity="0" Margin="0" Fill="{DynamicResource SystemColor}">
                            </Rectangle>
                            <Rectangle x:Name="SelectedBackground" RadiusX="3" RadiusY="3" Opacity="0" Margin="0" Fill="{DynamicResource SystemColor}">
                            </Rectangle>
                            <Border Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" />
                            <Rectangle x:Name="HighlightBackground" RadiusX="3" RadiusY="3" Opacity="0" Margin="0" Fill="{DynamicResource SystemColor}">
                            </Rectangle>
                            <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="5,1,5,1">
                                <TextElement.Foreground>
                                    <SolidColorBrush Color="White" />
                                </TextElement.Foreground>
                            </ContentPresenter>
                            <Path x:Name="Blackout" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" Fill="#FF000000" Stretch="Fill"
                                 Data="M8.1772461,11.029181 L10.433105,
                                   11.029181 L11.700684,120.801641 L12.973633,
                                   11.029181 L15.191895,11.029181 L12.844727,
                                   13.999395 L15.21875,17.060919 L12.962891,
                                   17.060919 L11.673828,15.256231 L10.352539,
                                   17.060919 L8.1396484,17.060919 L10.519043,
                                   14.042364 z" />
                            <Rectangle x:Name="DayButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="3" RadiusY="3">
                            </Rectangle>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Style for the months of a year and years of a decade.-->
        <Style TargetType="CalendarButton" x:Key="CalendarButtonStyle">
            <Setter Property="MinWidth" Value="40" />
            <Setter Property="MinHeight" Value="42" />
            <Setter Property="FontSize" Value="10" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CalendarButton">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.1" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="Normal" />
                                    <VisualState Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="SelectionStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="Unselected" />
                                    <VisualState Name="Selected">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="ActiveStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="Active" />
                                    <VisualState Name="Inactive">
                                        <Storyboard>
                                            <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF777777" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup Name="CalendarButtonFocusStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState Name="CalendarButtonFocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="CalendarButtonUnfocused" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="SelectedBackground" RadiusX="3" RadiusY="3" Opacity="0" Fill="{DynamicResource SystemColor}">
                            </Rectangle>
                            <Rectangle x:Name="Background" RadiusX="3" RadiusY="3" Opacity="0" Fill="{DynamicResource SystemColor}">
                            </Rectangle>
                            <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="1,0,1,1">
                                <TextElement.Foreground>
                                    <SolidColorBrush Color="#FF333333" />
                                </TextElement.Foreground>
                            </ContentPresenter>
                            <Rectangle x:Name="CalendarButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="3" RadiusY="3" Stroke="{DynamicResource SystemColor}">
                            </Rectangle>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="{DynamicResource ControlMediumColor}" />
                </Setter.Value>
            </Setter>
        </Style>
        <!--Button to go to the previous month or year.-->
        <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
            <Grid Cursor="Hand">
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimation Storyboard.TargetName="path" Duration="0:0:0.1" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{x:Static SystemParameters.WindowGlassColor}" />
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <!--<Rectangle Fill="Transparent" Opacity="1" Stretch="Fill"/>-->
                <Grid  Background="Transparent">
                    <Path x:Name="path" Margin="14,-6,0,0" Stretch="Fill" HorizontalAlignment="Left" Height="10" VerticalAlignment="Center" Width="6" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z">
                        <Path.Fill>
                            <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                    </Path>
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Fill" TargetName="path" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Fill" TargetName="path" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Fill" TargetName="path" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--Button to go to the next month or year.-->
        <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
            <Grid Cursor="Hand">
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.1" To="{x:Static SystemParameters.WindowGlassColor}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path" />
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <!--<Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>-->
                <Grid Background="Transparent">
                    <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6">
                        <Path.Fill>
                            <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                    </Path>
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Fill" TargetName="path" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Fill" TargetName="path" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Fill" TargetName="path" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--Button to go up a level to the year or decade.-->
        <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
            <Grid Cursor="Hand">
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimation Duration="0" To="{DynamicResource GlyphMouseOver}" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="buttonContent" />
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent" />
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <ContentPresenter x:Name="buttonContent" Margin="1,4,1,9" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="#FF333333" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Grid>
        </ControlTemplate>
        <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
            <Setter Property="Margin" Value="0,3,0,3" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CalendarItem}">
                        <ControlTemplate.Resources>
                            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                                <TextBlock FontWeight="Bold" FontSize="10" FontFamily="Verdana" Margin="10" Text="{Binding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </DataTemplate>
                        </ControlTemplate.Resources>
                        <Grid x:Name="PART_Root">
                            <Grid.Resources>
                                <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF" />
                            </Grid.Resources>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1">
                                <Border BorderBrush="#FFFFFFFF" BorderThickness="2" CornerRadius="1">
                                    <Grid>
                                        <Grid.Resources>
                                        </Grid.Resources>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Button x:Name="PART_PreviousButton" Template="{StaticResource PreviousButtonTemplate}" Focusable="False" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="0" Height="20" Width="28" />
                                        <Button x:Name="PART_HeaderButton" FontWeight="Bold" Focusable="False" FontSize="10.5" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" />
                                        <Button x:Name="PART_NextButton" Focusable="False" HorizontalAlignment="Right" Grid.Column="2" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Height="20" Width="28" />
                                        <Grid x:Name="PART_MonthView" Visibility="Visible" Grid.ColumnSpan="3" Grid.Row="1" Margin="6,-1,6,16" HorizontalAlignment="Center">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="20" />
                                                <RowDefinition Height="20" />
                                                <RowDefinition Height="20" />
                                                <RowDefinition Height="20" />
                                                <RowDefinition Height="20" />
                                                <RowDefinition Height="20" />
                                            </Grid.RowDefinitions>
                                        </Grid>
                                        <Grid x:Name="PART_YearView" Visibility="Hidden" Grid.ColumnSpan="3" Grid.Row="1" HorizontalAlignment="Center" Margin="6,-3,7,6">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Border>
                            <Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="{StaticResource DisabledColor}" StrokeThickness="1" Visibility="Collapsed" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible" />
                            </Trigger>
                            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                                <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                                <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                                <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                                <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Calendar}" x:Key="DatePickerCalendarStyle">
            <Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}" />
            <Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}" />
            <Setter Property="CalendarItemStyle" Value="{StaticResource CalendarItemStyle}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Calendar}">
                        <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                            <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--The template for the button that displays the calendar.-->
        <Style x:Key="DropDownButtonStyle" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                        <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                        <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimation Duration="0" To="#FF448DCA" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background" />
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#FF448DCA" />
                                            </ColorAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Highlight">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background). (GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0" VerticalAlignment="Center" Width="19">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20*" />
                                    <ColumnDefinition Width="20*" />
                                    <ColumnDefinition Width="20*" />
                                    <ColumnDefinition Width="20*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="23*" />
                                    <RowDefinition Height="19*" />
                                    <RowDefinition Height="19*" />
                                    <RowDefinition Height="19*" />
                                </Grid.RowDefinitions>
                                <Border x:Name="Highlight" BorderThickness="2" Grid.ColumnSpan="4" CornerRadius="3" Margin="-1" Opacity="1" Grid.Row="0" Grid.RowSpan="4">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource BorderDarkColor}" />
                                    </Border.BorderBrush>
                                </Border>
                                <Border x:Name="Background" BorderBrush="#FFFFFF" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="3" Margin="0,0,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                                    <Border.Background>
                                        <SolidColorBrush Color="{DynamicResource ControlDarkColor}" />
                                    </Border.Background>
                                </Border>
                                <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="2" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                            <GradientStop Color="#FFFFFFFF" Offset="0" />
                                            <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                            <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                            <GradientStop Color="#C6FFFFFF" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>
                                <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1" RadiusX="2" RadiusY="2">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource ControlMediumColor}"/>
                                    </Rectangle.Fill>
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                            <GradientStop Color="#FF494949" />
                                            <GradientStop Color="#FF9F9F9F" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Path Fill="#FF2F2F2F" Grid.Row="1" Grid.Column="0" Grid.RowSpan="3" Grid.ColumnSpan="4" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Margin="4,3,4,3" Stretch="Fill"
                                       Data="M11.426758,8.4305077 L11.749023,8.4305077 
                                         L11.749023,16.331387 L10.674805,16.331387 
                                         L10.674805,10.299648 L9.0742188,11.298672
                                         L9.0742188,10.294277 C9.4788408,10.090176 
                                         9.9094238,9.8090878 10.365967,9.4510155 
                                         C10.82251,9.0929432 11.176106,8.7527733 
                                         11.426758,8.4305077 z M14.65086,8.4305077 
                                         L18.566387,8.4305077 L18.566387,9.3435936 
                                         L15.671368,9.3435936 L15.671368,11.255703 
                                         C15.936341,11.058764 16.27293,10.960293 
                                         16.681133,10.960293 C17.411602,10.960293 
                                         17.969301,11.178717 18.354229,11.615566 
                                         C18.739157,12.052416 18.931622,12.673672
                                         18.931622,13.479336 C18.931622,15.452317 
                                         18.052553,16.438808 16.294415,16.438808
                                         C15.560365,16.438808 14.951641,16.234707 
                                         14.468243,15.826504 L14.881817,14.929531
                                         C15.368796,15.326992 15.837872,15.525723 
                                         16.289043,15.525723 C17.298809,15.525723 
                                         17.803692,14.895514 17.803692,13.635098 
                                         C17.803692,12.460618 17.305971,11.873379 
                                         16.310528,11.873379 C15.83071,11.873379 
                                         15.399232,12.079271 15.016094,12.491055
                                         L14.65086,12.238613 z" />
                                <Ellipse Grid.ColumnSpan="4" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3" />
                                <Border x:Name="DisabledVisual" BorderBrush="#B2FFFFFF" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,.5,.5" Opacity="0" Grid.Row="0" Grid.RowSpan="4" />
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--CHECKBOXES-->
        <!--========================================-->
        <Style TargetType="CheckBox" x:Key="ToggleSwitch">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <StackPanel Orientation="Horizontal">
                            <Grid >
                                <Border x:Name="tl_bg" Width="40" Height="20" CornerRadius="10" Margin="5,0"></Border>
                                <Border x:Name="tl_bg_th" Width="40" Height="20" CornerRadius="10" Margin="5,0"></Border>
                                <Border x:Name="button" Height="25" Width="25" CornerRadius="12.5" HorizontalAlignment="Left"  Background="LightGray"></Border>
                            </Grid>
                            <ContentPresenter x:Name="content" Margin="10,0,0,0" Content="{TemplateBinding Content}" VerticalAlignment="Center"/>
                        </StackPanel>
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="right">
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" Storyboard.TargetName="button" Duration="0:0:0.4" From="0,0,0,0" To="24,0,0,0" >
                                    <ThicknessAnimation.EasingFunction>
                                        <CircleEase EasingMode="EaseOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                            <Storyboard x:Key="left">
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" Storyboard.TargetName="button" Duration="0:0:0.4" From="24,0,0,0" To="0,0,0,0" >
                                    <ThicknessAnimation.EasingFunction>
                                        <CircleEase EasingMode="EaseOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Trigger.ExitActions>
                                    <RemoveStoryboard BeginStoryboardName="leftt"></RemoveStoryboard>
                                    <BeginStoryboard Storyboard="{StaticResource right}" x:Name="rightt" ></BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter TargetName="tl_bg" Property="Background" Value="#757575"></Setter>
                                <Setter TargetName="tl_bg_th" Property="Background" Value="#9e9e9e"></Setter>
                                <Setter TargetName="button" Property="Background" Value="LightGray"></Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Trigger.ExitActions>
                                    <RemoveStoryboard BeginStoryboardName="rightt"></RemoveStoryboard>
                                    <BeginStoryboard Storyboard="{StaticResource left}" x:Name="leftt" ></BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter TargetName="tl_bg" Property="Background" Value="{DynamicResource AccentBrush}"></Setter>
                                <Setter TargetName="tl_bg_th" Property="Background" Value="{DynamicResource AccentBrush}"></Setter>
                                <Setter TargetName="button" Property="Background" Value="lightblue"></Setter>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="Visibility" TargetName="tl_bg" Value="Visible" />
                                <Setter Property="Visibility" TargetName="tl_bg_th" Value="Hidden" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Visibility" TargetName="tl_bg" Value="Visible" />
                                <Setter Property="Visibility" TargetName="tl_bg_th" Value="Hidden" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Visibility" TargetName="tl_bg" Value="Hidden" />
                                <Setter Property="Visibility" TargetName="tl_bg_th" Value="Visible" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="CheckBox">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <BulletDecorator Background="Transparent" VerticalAlignment="Center">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border" Width="22" Height="22" CornerRadius="4" BorderThickness="2">
                                    <Grid>
                                        <Border x:Name="BorderTh" Background="Transparent" CornerRadius="4" />
                                        <Path Margin="1,1,0,0" Width="9" Height="10" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="2" Data="M -0.5 4 L 3 8 8 0" />
                                    </Grid>
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource DarkForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background"  TargetName="Border" Value="{DynamicResource LightMenu}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource LightForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource ThemeForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource SystemColor}" />
                                <Setter TargetName="BorderTh" Property="Background" Value="{DynamicResource ThemeAccentL}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="CheckMark" Property="Stroke" Value="#FF6C6C6C"/>
                                <Setter Property="Foreground" Value="Gray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="CheckBox" x:Key="RBCheck" >
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Border x:Name="Border" >
                            <Grid>
                                <Border x:Name="BorderTh" />
                                <Border x:Name="CheckMark" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Height="5" Margin="10,0" />
                                <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" RecognizesAccessKey="True"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Hidden" />
                                <Setter TargetName="CheckMark" Property="Background" Value="{DynamicResource SystemColor}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Hidden" />
                                <Setter TargetName="CheckMark" Property="Background" Value="{DynamicResource SystemColor}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Visible" />
                                <Setter TargetName="CheckMark" Property="Background" Value="{DynamicResource ThemeAccentL}" />
                            </DataTrigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Foreground" Value="Gray"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="CheckMark" Property="Background" Value="#FF6C6C6C"/>
                                <Setter Property="Foreground" Value="Gray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="CheckBox" x:Key="CheckRadio">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Padding" Value="10,6" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Border Name="bdr_btn_cc" CornerRadius="15" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <Grid>
                                <Border x:Name="bg" Opacity="0.2" CornerRadius="15" />
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <Path Margin="1,1,15,0" Width="9" Height="10" HorizontalAlignment="Right" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="2" Data="M -0.5 4 L 3 8 8 0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="#7f8c8d" />
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="{DynamicResource AccentBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--COMBOBOXES-->
        <!--========================================-->

        <!--v1-->
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                </Border>
                <Border Grid.Column="0" CornerRadius="2,0,0,2" Margin="1" >
                    <Border.Background>
                        <SolidColorBrush Color="Transparent"/>
                    </Border.Background>
                </Border>
                <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Margin="5,0" Fill="{TemplateBinding Foreground}">
                </Path>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color" To="#9e9e9e"/>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill.Color" To="#9e9e9e"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.EnterActions>
                    <MultiTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill.Color"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.ExitActions>
                </MultiTrigger>
                <!--<Trigger Property="IsChecked" Value="True">
             <Trigger.EnterActions>
                 <BeginStoryboard>
                     <Storyboard>
                         <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color" To="{StaticResource ControlPressedColor}"/>
                         <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill.Color" To="White"/>
                     </Storyboard>
                 </BeginStoryboard>
             </Trigger.EnterActions>
             <Trigger.ExitActions>
                 <BeginStoryboard>
                     <Storyboard>
                         <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color"/>
                         <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill.Color"/>
                     </Storyboard>
                 </BeginStoryboard>
             </Trigger.ExitActions>
         </Trigger>-->
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="MinWidth" Value="57" />
            <Setter Property="MinHeight" Value="20" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.5">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="EditStates">
                                    <VisualState x:Name="Editable">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Uneditable" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Grid.Column="2" Focusable="false" ClickMode="Press" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2"/>
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0">
                            </ContentPresenter>
                            <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,3,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    </Border>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />

                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Border" Padding="0" SnapsToDevicePixels="true" Background="Transparent" CornerRadius="5">
                            <Grid>
                                <Border x:Name="bg" CornerRadius="5" />
                                <ContentPresenter Margin="10,2" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="bg" Property="Background" Value="#7f8c8d" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="bg" Property="Background" Value="{DynamicResource AccentBrush}" />
                                <Setter TargetName="bg" Property="Opacity" Value="0.4" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--v2-->
        <ControlTemplate x:Key="ComboBoxToggleButtonV2" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}">
                </Border>
                <Border Grid.Column="0" CornerRadius="2,0,0,2" Margin="1" >
                    <Border.Background>
                        <SolidColorBrush Color="Transparent"/>
                    </Border.Background>
                </Border>
                <!--<Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Margin="5,0" Fill="{TemplateBinding Foreground}">
                </Path>-->
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color" To="#9e9e9e"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.EnterActions>
                    <MultiTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.ExitActions>
                </MultiTrigger>
                <Trigger Property="IsChecked" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ThicknessAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness" To="2" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ThicknessAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBoxV2" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="ComboV2" TargetType="{x:Type ComboBox}">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="MinWidth" Value="100" />
            <Setter Property="MinHeight" Value="50" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.5">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="EditStates">
                                    <VisualState x:Name="Editable">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Uneditable" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButtonV2}" Grid.ColumnSpan="2" Grid.Column="0" Focusable="false" ClickMode="Press" Foreground="{TemplateBinding Foreground}" Background="Transparent" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2"/>
                            <ContentPresenter x:Name="ContentSite" Grid.Column="1" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="5,7">
                            </ContentPresenter>
                            <TextBox x:Name="PART_EditableTextBox" Grid.Column="1" Style="{x:Null}" Template="{StaticResource ComboBoxTextBoxV2}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="0,3,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <TextBlock Text="{TemplateBinding ToolTip}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,4" FontSize="16" FontWeight="Medium" IsHitTestVisible="False"/>
                            <TextBlock Text="{TemplateBinding Tag}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center" Margin="13,3,10,3" FontSize="18" FontFamily="{StaticResource FAsolid}" IsHitTestVisible="False"/>
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    </Border>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="#ff282828" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="#ffc9c9c9" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeAccentD}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--v3 button-box-->
        <ControlTemplate x:Key="ComboBoxToggleButtonV3" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="15" Background="{TemplateBinding Background}">
                </Border>
                <Border Grid.Column="0" CornerRadius="2,0,0,2" Margin="1" >
                    <Border.Background>
                        <SolidColorBrush Color="Transparent"/>
                    </Border.Background>
                </Border>
                <Border Grid.Column="1" x:Name="sectionLine" Width="3" HorizontalAlignment="Left" />
                <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"  Margin="5,0">
                </Path>
            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource DarkForeground}" />
                    <Setter Property="Background" TargetName="sectionLine" Value="{DynamicResource DarkMenu}" />
                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource SystemColor}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" TargetName="sectionLine" Value="{DynamicResource LightMenu}" />
                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource SystemColor}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource ThemeForeground}" />
                    <Setter Property="Background" TargetName="sectionLine" Value="{DynamicResource ThemeBackground}" />
                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color" To="#9e9e9e"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.EnterActions>
                    <MultiTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.ExitActions>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBoxV3" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="ButtonBox" TargetType="{x:Type ComboBox}">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="MinWidth" Value="165" />
            <Setter Property="MinHeight" Value="30" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="FontWeight" Value="Medium" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.5">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="EditStates">
                                    <VisualState x:Name="Editable">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Uneditable" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButtonV3}" Grid.ColumnSpan="2" Grid.Column="0" Focusable="false" ClickMode="Press" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter x:Name="ContentSite" Grid.Column="1" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="0,7">
                            </ContentPresenter>
                            <TextBox x:Name="PART_EditableTextBox" Grid.Column="1" Style="{x:Null}" Template="{StaticResource ComboBoxTextBoxV3}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,3" TextAlignment="Center" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <TextBlock Text="{TemplateBinding Tag}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center" Margin="10,3,5,3" FontSize="18" FontFamily="{StaticResource FAsolid}" IsHitTestVisible="False"/>
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition x:Name="customRow" Height="0" />
                                    </Grid.RowDefinitions>
                                    <Border Grid.RowSpan="2" x:Name="DropDownBorder" Background="{TemplateBinding Background}"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    </Border>
                                    <ScrollViewer Grid.Row="0" Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                    <Grid Grid.Row="1">
                                        <Border Height="2" VerticalAlignment="Top" Background="{TemplateBinding BorderBrush}" />
                                        <!--<Button VerticalAlignment="Bottom"  Margin="3,0,3,2" Content="Custom" Height="30" x:Name="customStrength_Btn" Visibility="Collapsed"  Click="customStrength_Btn_Click" Style="{StaticResource CustomButton}" />-->
                                        <TextBlock x:Name="nameTemp" Text="{TemplateBinding Name}" Visibility="Collapsed" />
                                    </Grid>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <Trigger Property="Text" SourceName="nameTemp" Value="CB_StrokeThickness">
                                <!--<Setter Property="Visibility" TargetName="customStrength_Btn" Value="Visible" />-->
                                <Setter Property="Height" TargetName="customRow" Value="34" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="#ff282828" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="#fff8f8f8" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--v4-->
        <ControlTemplate x:Key="ComboBoxToggleButtonV4" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="10" Style="{StaticResource BorderMiddleground}" >
                </Border>
                <Border Grid.Column="0" CornerRadius="2,0,0,2" Margin="1" >
                    <Border.Background>
                        <SolidColorBrush Color="Transparent"/>
                    </Border.Background>
                </Border>
                <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Margin="5,0" Fill="{TemplateBinding Foreground}">
                </Path>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill.Color" To="#9e9e9e"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.EnterActions>
                    <MultiTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill.Color"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.ExitActions>
                </MultiTrigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter TargetName="Border" Property="CornerRadius" Value="10,10,0,0" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBoxV4" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Style="{StaticResource BorderMiddleground}" />
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="v4" TargetType="{x:Type ComboBox}">
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="Medium" />
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="MinWidth" Value="57" />
            <Setter Property="MinHeight" Value="20" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.5">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="EditStates">
                                    <VisualState x:Name="Editable">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Uneditable" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButtonV4}" Grid.Column="2" Focusable="false" ClickMode="Press" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2"/>
                            <StackPanel Orientation="Horizontal" Margin="10,0,20,0" >
                                <TextBlock Text="{TemplateBinding Tag}" VerticalAlignment="Center" />
                                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0">
                                </ContentPresenter>
                            </StackPanel>
                            <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBoxV4}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,3,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Style="{StaticResource BorderMiddleground}" BorderThickness="0">
                                    </Border>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />

                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--CONTEXTMENUS-->
        <!--========================================-->
        <Style TargetType="{x:Type ContextMenu}">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            <Setter Property="HasDropShadow" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" Value="true">
                                <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                                <Setter TargetName="Border" Property="CornerRadius" Value="5" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Height" Value="1" />
            <Setter Property="Margin" Value="0,4,0,4" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border BorderThickness="1">
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                            </Border.BorderBrush>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- TopLevelItem -->
        <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
            <Border x:Name="Border" CornerRadius="5">
                <Grid>
                    <ContentPresenter Margin="0,3" ContentSource="Header" RecognizesAccessKey="True" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource AccentBrush}" />
                    <Setter Property="Opacity" TargetName="Border" Value="0.5" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!-- SubmenuItem -->
        <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
            <Border x:Name="Border" CornerRadius="3" BorderThickness="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                        <ColumnDefinition Width="13" />
                    </Grid.ColumnDefinitions>
                    <Border CornerRadius="3" x:Name="clrB" Grid.ColumnSpan="4" />
                    <ContentPresenter x:Name="Icon" Margin="6,0" VerticalAlignment="Center" ContentSource="Icon" />
                    <Border x:Name="Check" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0" BorderThickness="1" Background="{DynamicResource AccentBrush}">
                        <Border.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.BorderBrush>
                        <Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0">
                            <Path.Stroke>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                            </Path.Stroke>
                        </Path>
                    </Border>
                    <ContentPresenter x:Name="HeaderHost" VerticalAlignment="Center" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="IsCheckable" Value="true">
                    <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter Property="Background" TargetName="clrB" Value="{DynamicResource AccentBrush}" />
                    <Setter Property="Opacity" TargetName="clrB" Value="0.5" />
                    <Setter Property="BorderBrush" TargetName="Border">
                        <Setter.Value>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="{DynamicResource BorderMediumColor}" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--DATEPICKER-->
        <!--========================================-->
        <Style TargetType="{x:Type DatePicker}">
            <Setter Property="Foreground" Value="#FF333333" />
            <Setter Property="IsTodayHighlighted" Value="True" />
            <Setter Property="SelectedDateFormat" Value="Short" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DatePicker}">
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="5" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_Button" Grid.Column="1" VerticalAlignment="Center" Focusable="False" HorizontalAlignment="Left" Margin="3,0,3,0" Grid.Row="0" Style="{StaticResource DropDownButtonStyle}" />
                                <DatePickerTextBox Style="{StaticResource DefaultTB}" Tag="{TemplateBinding Tag}" x:Name="PART_TextBox" Grid.Column="0" Foreground="{TemplateBinding Foreground}" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="Stretch" Grid.Row="0" VerticalContentAlignment="Stretch" />
                                <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" VerticalAlignment="Center" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Column="0" Fill="#A5FFFFFF" VerticalAlignment="Center" RadiusY="1" Grid.Row="0" RadiusX="1" />
                                    <Rectangle Grid.Column="1" Fill="#A5FFFFFF" Height="18" VerticalAlignment="Center" Margin="3,0,3,0" RadiusY="1" Grid.Row="0" RadiusX="1" Width="19" />
                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False" />
                                </Grid>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--GRIDS-->
        <!--========================================-->
        <Style x:Key="Menu" TargetType="Grid">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Background" TargetType="Grid">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--GROUPBOXES-->
        <!--========================================-->
        <Style TargetType="GroupBox" x:Key="DefaultGroupBox">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--LISTBOXES-->
        <!--========================================-->
        <Style x:Key="LB_FullHorizontal" TargetType="ListBox">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                            <ScrollViewer Margin="0" Focusable="false" HorizontalAlignment="Center">
                                <StackPanel Orientation="Horizontal" Margin="2" IsItemsHost="True"  />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LB_horizontal" TargetType="ListBox">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                            <ScrollViewer Margin="0" Focusable="false">
                                <WrapPanel Orientation="Horizontal" MaxWidth="{TemplateBinding ActualWidth}" Margin="2" IsItemsHost="True" HorizontalAlignment="Center"  />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{StaticResource DisabledControlLightColor}" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Border" Property="BorderBrush">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{DynamicResource DisabledBorderLightColor}" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LB_vertical" TargetType="ListBox">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                            <ScrollViewer Margin="0" Focusable="false">
                                <StackPanel Orientation="Vertical" Width="{TemplateBinding ActualWidth}" MaxWidth="{TemplateBinding ActualWidth}" Margin="2" IsItemsHost="True" />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Margin" Value="10,10,15,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border x:Name="Border" Padding="2" Margin="0,0,10,0" SnapsToDevicePixels="true" CornerRadius="20" BorderThickness="2" BorderBrush="Transparent">
                            <ContentPresenter x:Name="content"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True" >
                                <Setter Property="Opacity" TargetName="Border" Value=".75" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="#ff282828" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="#fff8f8f8" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--PATH-->
        <!--========================================-->
        <Style TargetType="Path" x:Key="DefaultPath">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Fill" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Fill" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Fill" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--PROGRESSBARS-->
        <!--========================================-->
        <Style TargetType="ProgressBar" x:Key="ModernProgress" >
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Height" Value="3" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                    <Setter Property="Foreground" Value="{DynamicResource SystemColor}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource SystemColor}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeAccentL}" />
                    <Setter Property="Foreground" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid MinHeight="20" MinWidth="200" Background="{TemplateBinding Background}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate" />
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Duration="00:00:00" Storyboard.TargetName="PART_Indicator" Storyboard.TargetProperty="Background">
                                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <SolidColorBrush>Transparent</SolidColorBrush>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="PART_Track" CornerRadius="8" BorderThickness="1">
                            </Border>
                            <Border x:Name="PART_Indicator" CornerRadius="8" BorderThickness="0" HorizontalAlignment="Left" Background="{TemplateBinding Foreground}" Margin="0,0,0,1" >
                            </Border>
                            <Border Margin="10,0" VerticalAlignment="Center" HorizontalAlignment="Right" Style="{StaticResource Border}" Padding="5,1" CornerRadius="5" >
                                <TextBlock x:Name="percentage" Text="{TemplateBinding Tag}" Foreground="White" FontSize="11.5" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="Foreground" TargetName="percentage" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="Background" TargetName="PART_Track" Value="#ff252525" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" TargetName="percentage"  Value="{DynamicResource LightForeground}" />
                                <Setter Property="Background" TargetName="PART_Track" Value="{DynamicResource LightMenu}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Foreground" TargetName="percentage"  Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="PART_Track" Value="{DynamicResource ThemeAccentL}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="{x:Static SystemParameters.WindowGlassBrush}" />
        </Style>

        <!--RICHTEXTBOX-->
        <!--========================================-->
        <Style x:Key="CanvasRTB" TargetType="{x:Type RichTextBox}">
            <Setter Property="SelectionBrush" Value="{DynamicResource SystemColor}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
        </Style>
        <Style TargetType="{x:Type Paragraph}">
            <Setter Property="Margin" Value="0" />
        </Style>

        <!--RADIOBUTTONS-->
        <!--========================================-->
        <Style TargetType="RadioButton" x:Key="CheckRB" >
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <BulletDecorator Background="Transparent" VerticalAlignment="Center">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border" Width="22" Height="22" CornerRadius="4" BorderThickness="2">
                                    <Grid>
                                        <Border x:Name="BorderTh" Background="Transparent" CornerRadius="4" />
                                        <Path Margin="1,1,0,0" Width="9" Height="10" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="2" Data="M -0.5 4 L 3 8 8 0" />
                                    </Grid>
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource DarkForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background"  TargetName="Border" Value="{DynamicResource LightMenu}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource LightForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource ThemeForeground}" />
                                <Setter TargetName="BorderTh" Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource SystemColor}" />
                                <Setter TargetName="BorderTh" Property="Background" Value="{DynamicResource ThemeAccentL}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="CheckMark" Property="Stroke" Value="#FF6C6C6C"/>
                                <Setter Property="Foreground" Value="Gray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="RadioButton" x:Key="CustomRadio">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Padding" Value="10,6" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Name="bdr_btn_cc" CornerRadius="15" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <Grid>
                                <Border x:Name="bg" Opacity="0.2" CornerRadius="15" />
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="#7f8c8d" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="{DynamicResource AccentBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type RadioButton}" x:Key="navRadio">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Name="bdr" CornerRadius="7" Background="{TemplateBinding Background}">
                            <Viewbox HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Viewbox>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames BeginTime="0:0:0" Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                                <LinearColorKeyFrame KeyTime="0:0:0.01" Value="#8e8e8e" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr" Storyboard.TargetProperty="Background.Color" To="#7f8c8d"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RB_Modern" TargetType="RadioButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="FontSize" Value="17" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border CornerRadius="5" x:Name="Border" Background="Transparent" >
                            <Grid>
                                <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" />
                                <Border x:Name="SelectBDR" Background="{DynamicResource AccentBrush}" Height="0" VerticalAlignment="Bottom" CornerRadius="2" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Opacity" Value="0.4" TargetName="SelectBDR" />
                                <Setter Property="Height" Value="3" TargetName="SelectBDR" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Height" Value="3" TargetName="SelectBDR" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="Background" TargetName="SelectBDR" Value="{DynamicResource SystemColor}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Background" TargetName="SelectBDR" Value="{DynamicResource SystemColor}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="SelectBDR" Value="{DynamicResource ThemeAccentL}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RB_GroupStart" TargetType="RadioButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="MaxHeight" Value="40" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border CornerRadius="8,0,0,8" x:Name="Border" >
                            <Grid>
                                <Viewbox>
                                    <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" />
                                </Viewbox>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="BorderThickness" TargetName="Border" Value="2"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="IsChecked" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="Border" Value="1"/>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightMenu}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RB_GroupMiddle" TargetType="RadioButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="MaxHeight" Value="40" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border CornerRadius="0" x:Name="Border" BorderThickness="0" >
                            <Grid>
                                <Viewbox>
                                    <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" />
                                </Viewbox>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="BorderThickness" TargetName="Border" Value="2"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="IsChecked" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="Border" Value="1"/>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightMenu}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RB_GroupEnd" TargetType="RadioButton">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="MaxHeight" Value="40" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border CornerRadius="0,8,8,0" x:Name="Border" >
                            <Grid>
                                <Viewbox>
                                    <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" />
                                </Viewbox>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="BorderThickness" TargetName="Border" Value="2"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="IsChecked" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="Border" Value="1"/>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightMenu}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type RadioButton}" x:Key="modernNavRadio">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Name="bdr" CornerRadius="20" Background="Transparent" >
                            <Grid>
                                <Border x:Name="bg" Opacity="0.2" CornerRadius="20" />
                                <Viewbox HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Viewbox>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="#7f8c8d" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="{DynamicResource AccentBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--SCROLLERS-->
        <!--========================================-->
        <Style x:Key="LeftUpScroller" TargetType="{x:Type ScrollViewer}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Border Grid.Column="1" Grid.Row="0" Grid.RowSpan="2">
                                <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
                            </Border>
                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="0" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" 
                                       ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>

                            <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="0" Grid.Column="1" VerticalAlignment="Top" Value="{TemplateBinding HorizontalOffset}" 
                                       Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="Border" Margin="1" CornerRadius="2" BorderThickness="1">
                            <Border.BorderBrush>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource BorderMediumColor}" Offset="0.0" />
                                            <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="Gray" />
                            </Border.Background>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" >
                                <Path.Fill>
                                    <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                                </Path.Fill>
                            </Path>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid Width="5" Margin="0,-8,0,-8" x:Name="grid">
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="10" />
                    <RowDefinition Height="0.00001*" />
                    <RowDefinition MaxHeight="10" />
                </Grid.RowDefinitions>
                <Border Grid.RowSpan="3" CornerRadius="10" Background="Transparent" />
                <!--<RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" Visibility="Collapsed" x:Name="rb_u"/>-->
                <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0">
                            <Thumb.Background>
                                <SolidColorBrush Color="#ff656565" />
                            </Thumb.Background>
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <!--<RepeatButton Grid.Row="2" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" Visibility="Collapsed" x:Name="rb_d"/>-->
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True" SourceName="grid">
                    <!--<Setter Property="Visibility" TargetName="rb_u" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="rb_d" Value="Visible" />-->
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Width" Storyboard.TargetName="grid" To="12" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Width" Storyboard.TargetName="grid" To="5" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False" SourceName="grid">
                    <!--<Setter Property="Visibility" TargetName="rb_u" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="rb_d" Value="Collapsed" />-->
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid x:Name="grid" Height="5" Margin="0,0,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="10" />
                    <ColumnDefinition Width="0.00001*" />
                    <ColumnDefinition MaxWidth="10" Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" CornerRadius="2" Background="Transparent" />
                <!--<RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />-->
                <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1">
                            <Thumb.Background>
                                <SolidColorBrush Color="#ff656565"/>
                            </Thumb.Background>
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <!--<RepeatButton Grid.Column="2" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" />-->
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True" SourceName="grid">
                    <!--<Setter Property="Visibility" TargetName="rb_u" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="rb_d" Value="Visible" />-->
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Height" Storyboard.TargetName="grid" To="12" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Height" Storyboard.TargetName="grid" To="5" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False" SourceName="grid">
                    <!--<Setter Property="Visibility" TargetName="rb_u" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="rb_d" Value="Collapsed" />-->
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto" />
                    <Setter Property="Height" Value="18" />
                    <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="18" />
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--SLIDER-->
        <!--========================================-->
        <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Height" Value="14" />
            <Setter Property="Width" Value="14" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Ellipse x:Name="Ellipse" StrokeThickness="0">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{x:Static SystemParameters.WindowGlassColor}" />
                            </Ellipse.Fill>
                        </Ellipse>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Template when the orientation of the Slider is Horizontal.-->
        <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" SnapsToDevicePixels="True" Placement="Top" Height="4" Visibility="Collapsed">
                    <TickBar.Fill>
                        <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                    </TickBar.Fill>
                </TickBar>
                <Border x:Name="TrackBackground" Margin="0" CornerRadius="2" Height="4" Grid.Row="1" BorderThickness="1">
                    <Border.BorderBrush>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                    <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Border.BorderBrush>
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0.0" />
                                    <GradientStop Color="{DynamicResource SliderTrackDarkColor}" Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Track Grid.Row="1" x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.DecreaseLarge" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource SliderThumbStyle}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.IncreaseLarge" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <TickBar x:Name="BottomTick" SnapsToDevicePixels="True" Grid.Row="2" Fill="{TemplateBinding Foreground}" Placement="Bottom" Height="4" Visibility="Collapsed" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement" Value="TopLeft">
                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement" Value="BottomRight">
                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement" Value="Both">
                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--Template when the orientation of the Slider is Vertical.-->
        <ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" SnapsToDevicePixels="True" Placement="Left" Width="4" Visibility="Collapsed">
                    <TickBar.Fill>
                        <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                    </TickBar.Fill>
                </TickBar>
                <Border x:Name="TrackBackground" Margin="0" CornerRadius="2" Width="4" Grid.Column="1" BorderThickness="1">
                    <Border.BorderBrush>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                    <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Border.BorderBrush>
                    <Border.Background>
                        <LinearGradientBrush EndPoint="1,0" StartPoint="0.25,0">
                            <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0" />
                            <GradientStop Color="{DynamicResource SliderTrackDarkColor}" Offset="1" />
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Track Grid.Column="1" x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.DecreaseLarge" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource SliderThumbStyle}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.IncreaseLarge" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <TickBar x:Name="BottomTick" SnapsToDevicePixels="True" Grid.Column="2" Fill="{TemplateBinding Foreground}" Placement="Right" Width="4" Visibility="Collapsed" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement" Value="TopLeft">
                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement" Value="BottomRight">
                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement" Value="Both">
                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="{x:Type Slider}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="MinWidth" Value="104" />
                    <Setter Property="MinHeight" Value="21" />
                    <Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="MinWidth" Value="21" />
                    <Setter Property="MinHeight" Value="104" />
                    <Setter Property="Template" Value="{StaticResource VerticalSlider}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--STACKPANELS-->
        <!--========================================-->
        <Style x:Key="MenuSP" TargetType="StackPanel">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BackgroundSP" TargetType="StackPanel">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--TAB CONTROLS-->
        <!--========================================-->
        <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="HasDropShadow" Value="True" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToolTip">
                        <Border Name="Border" BorderThickness="1.5">
                            <ContentPresenter x:Name="content" Margin="4" HorizontalAlignment="Left" VerticalAlignment="Top" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" Value="true">
                                <Setter TargetName="Border" Property="CornerRadius" Value="5" />
                                <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkMenu}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--TEXTBLOCKS-->
        <!--========================================-->
        <Style x:Key="ModeTextBlock" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />

                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--TEXTBOXES-->
        <!--========================================-->
        <Style TargetType="{x:Type TextBox}" x:Key="BarTB">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Name="Border" CornerRadius="8" Padding="2" BorderThickness="2" BorderBrush="Transparent">
                            <Grid>
                                <ScrollViewer Margin="3,0" x:Name="PART_ContentHost" />
                                <TextBlock x:Name="Placeholder" Visibility="Collapsed" Text="{TemplateBinding Tag}" VerticalAlignment="Center" FontStyle="Italic" Opacity="0.7" Padding="5,0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkMenu}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                            </DataTrigger>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" TargetName="Placeholder" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsSelectionActive" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e">
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" >
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TextBox}" x:Key="DPTB">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border Name="Border" CornerRadius="3" Padding="2">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                            </Border.Background>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelectionActive" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color" To="#9e9e9e">
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color">
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color" To="#9e9e9e"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TextBox}" x:Key="DefaultTB">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Name="Border" CornerRadius="10" Padding="2" BorderThickness="2" BorderBrush="Transparent">
                            <Grid>
                                <ScrollViewer Margin="3,0" x:Name="PART_ContentHost" />
                                <TextBlock x:Name="Placeholder" Visibility="Collapsed" Text="{TemplateBinding Tag}" VerticalAlignment="Center" FontStyle="Italic" Opacity="0.7" Padding="5,0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" TargetName="Placeholder" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Border" Value="#9e9e9e" />
                            </Trigger>
                            <Trigger Property="IsSelectionActive" Value="True">
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TextBox}" x:Key="DefaultMultiTB">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Name="Border" CornerRadius="10" Padding="2" BorderThickness="2" BorderBrush="Transparent">
                            <Grid>
                                <ScrollViewer Margin="3,0" x:Name="PART_ContentHost" />
                                <TextBlock x:Name="Placeholder" Visibility="Collapsed" Text="{TemplateBinding Tag}" VerticalAlignment="Top" FontStyle="Italic" Opacity="0.7" Padding="5,0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />

                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" TargetName="Placeholder" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsSelectionActive" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e">
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" >
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TextBox}" x:Key="TransparentTB">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Name="Border" CornerRadius="3" Padding="2" BorderThickness="1">
                            <Grid>
                                <ScrollViewer Margin="3,0" x:Name="PART_ContentHost" />
                                <TextBlock x:Name="Placeholder" Visibility="Collapsed" Text="{TemplateBinding Tag}" VerticalAlignment="Top" HorizontalAlignment="Center" FontStyle="Italic" Opacity="0.7" Padding="5,0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DarkMenu}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" TargetName="Placeholder" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsSelectionActive" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e">
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" >
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--TOGGLEBUTTONS-->
        <!--========================================-->
        <Style TargetType="{x:Type ToggleButton}" x:Key="RecordTB">
            <Setter Property="Width" Value="40"/>
            <Setter Property="FontFamily" Value="{StaticResource FAsolid}" />
            <Setter Property="Height" Value="40" />
            <Setter Property="Margin" Value="0,5,0,5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Name="bdr_btn_cc" CornerRadius="5" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="#e74c3c"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="#7f8c8d"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--SCROLLER-->
        <!--======================================--><!--
        <Style x:Key="LeftUpScroller" TargetType="{x:Type ScrollViewer}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Border Grid.Column="1" Grid.Row="0" Grid.RowSpan="2">
                                <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
                            </Border>
                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="0" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="0" Grid.Column="1" VerticalAlignment="Top" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="Border" Margin="1" CornerRadius="2" BorderThickness="1">
                            <Border.BorderBrush>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource BorderMediumColor}" Offset="0.0" />
                                            <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="Gray" />
                            </Border.Background>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" >
                                <Path.Fill>
                                    <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                                </Path.Fill>
                            </Path>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid Width="5" Margin="0,-8,0,-8" x:Name="grid">
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="10" />
                    <RowDefinition Height="0.00001*" />
                    <RowDefinition MaxHeight="10" />
                </Grid.RowDefinitions>
                <Border Grid.RowSpan="3" CornerRadius="10" Background="Transparent" />
                --><!--<RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" Visibility="Collapsed" x:Name="rb_u"/>--><!--
                <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0">
                            <Thumb.Background>
                                <SolidColorBrush Color="#ff656565" />
                            </Thumb.Background>
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                --><!--<RepeatButton Grid.Row="2" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" Visibility="Collapsed" x:Name="rb_d"/>--><!--
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True" SourceName="grid">
                    --><!--<Setter Property="Visibility" TargetName="rb_u" Value="Visible"/>
            <Setter Property="Visibility" TargetName="rb_d" Value="Visible" />--><!--
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Width" Storyboard.TargetName="grid" To="12" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Width" Storyboard.TargetName="grid" To="5" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False" SourceName="grid">
                    --><!--<Setter Property="Visibility" TargetName="rb_u" Value="Collapsed"/>
            <Setter Property="Visibility" TargetName="rb_d" Value="Collapsed" />--><!--
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid x:Name="grid" Height="5" Margin="0,0,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="10" />
                    <ColumnDefinition Width="0.00001*" />
                    <ColumnDefinition MaxWidth="10" Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" CornerRadius="2" Background="Transparent" />
                --><!--<RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />--><!--
                <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1">
                            <Thumb.Background>
                                <SolidColorBrush Color="#ff656565"/>
                            </Thumb.Background>
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                --><!--<RepeatButton Grid.Column="2" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" />--><!--
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True" SourceName="grid">
                    --><!--<Setter Property="Visibility" TargetName="rb_u" Value="Visible"/>
            <Setter Property="Visibility" TargetName="rb_d" Value="Visible" />--><!--
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Height" Storyboard.TargetName="grid" To="12" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Height" Storyboard.TargetName="grid" To="5" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False" SourceName="grid">
                    --><!--<Setter Property="Visibility" TargetName="rb_u" Value="Collapsed"/>
            <Setter Property="Visibility" TargetName="rb_d" Value="Collapsed" />--><!--
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto" />
                    <Setter Property="Height" Value="18" />
                    <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="18" />
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        --><!--Button-->
        <!--======================================--><!--
        <Style TargetType="Button" x:Key="LinkButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="10" Background="Transparent">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="DarkGray"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#9e9e9e"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="CustomButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="6" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="CadetBlue"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="#7f8c8d"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="RoundButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="25" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_2_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="CadetBlue"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_2_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="bsb_1_b">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color" To="#7f8c8d"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="bsb_1_e">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="bdr_btn_cc" Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource SystemColor}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

        <Style TargetType="Button" x:Key="ModernButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="bdr_btn_cc" CornerRadius="6" BorderThickness="0" >
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Opacity" Value="0.8" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource AccentBrush}" />
                                <Setter Property="Opacity" Value="0.7" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource LightSecondMenu}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--<Style x:Key="WindowCloseBTN" TargetType="Button">
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="bdr" Background="Transparent" >
                            <ContentPresenter x:Name="content"  Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#c0392b" />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="content" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="White"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"  />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="content" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="WindowBTN" TargetType="Button">
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="bdr" Background="Transparent">
                            <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" FillBehavior="HoldEnd" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#7f8c8d" />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="White"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="bdr" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"  />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        --><!--COMBOBOX-->
        <!--========================================--><!--
        <ControlTemplate x:Key="ComboBoxToggleButtonV2" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}">
                </Border>
                <Border Grid.Column="0" CornerRadius="2,0,0,2" Margin="1" >
                    <Border.Background>
                        <SolidColorBrush Color="Transparent"/>
                    </Border.Background>
                </Border>
                --><!--<Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Margin="5,0" Fill="{TemplateBinding Foreground}">
        </Path>--><!--
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color" To="#9e9e9e"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.EnterActions>
                    <MultiTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.ExitActions>
                </MultiTrigger>
                <Trigger Property="IsChecked" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ThicknessAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness" To="2" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ThicknessAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBoxV2" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="ComboV2" TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="MinWidth" Value="100" />
            <Setter Property="MinHeight" Value="50" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.5">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="EditStates">
                                    <VisualState x:Name="Editable">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Uneditable" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButtonV2}" Grid.ColumnSpan="2" Grid.Column="0" Focusable="false" ClickMode="Press" Foreground="{TemplateBinding Foreground}" Background="Transparent" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2"/>
                            <ContentPresenter x:Name="ContentSite" Grid.Column="1" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="5,7">
                            </ContentPresenter>
                            <TextBox x:Name="PART_EditableTextBox" Grid.Column="1" Style="{x:Null}" Template="{StaticResource ComboBoxTextBoxV2}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="0,3,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <TextBlock Text="{TemplateBinding ToolTip}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,4" FontSize="16" FontWeight="Medium" IsHitTestVisible="False"/>
                            <TextBlock Text="{TemplateBinding Tag}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center" Margin="13,3,10,3" FontSize="18" FontFamily="{StaticResource FAsolid}" IsHitTestVisible="False"/>
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    </Border>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="#ff282828" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="#ffc9c9c9" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeAccentD}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        --><!--TextBlock-->
        <!--======================================--><!--
        <Style x:Key="ModeTextBlock" TargetType="TextBlock">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        --><!--TEXTBOX-->
        <!--======================================--><!--
        <Style TargetType="{x:Type TextBox}" x:Key="DefaultTB">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Name="Border" CornerRadius="6" Padding="2" BorderThickness="2" BorderBrush="Transparent">
                            <Grid>
                                <ScrollViewer Margin="3,0" x:Name="PART_ContentHost" />
                                <TextBlock x:Name="Placeholder" Visibility="Collapsed" Text="{TemplateBinding Tag}" VerticalAlignment="Center" FontStyle="Italic" Opacity="0.7" Padding="5,0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="CaretBrush" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" TargetName="Placeholder" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsSelectionActive" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e">
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" >
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#9e9e9e"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        --><!--Container-->
        <!--=====================================--><!--
        <Style x:Key="Menu" TargetType="Grid">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Background" TargetType="Grid">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="MenuSP" TargetType="StackPanel">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BackgroundSP" TargetType="StackPanel">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Stroke" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="#ff909090" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Border" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Bar" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="#ff282828" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                    <Setter Property="Background" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeAccentD}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BdrBackground" TargetType="Border">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Background" Value="{DynamicResource DarkMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        --><!--ListBox / ListBoxItem-->
        <!--========================================--><!--
        <Style x:Key="LB_FullHorizontal"
TargetType="ListBox">
            <Setter Property="SnapsToDevicePixels"
   Value="true" />
            <Setter Property="OverridesDefaultStyle"
   Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
   Value="Hidden" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
   Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll"
   Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                            <ScrollViewer Margin="0" Focusable="false" HorizontalAlignment="Center" Style="{StaticResource LeftUpScroller}">
                                <StackPanel Orientation="Horizontal" Margin="2" IsItemsHost="True"  />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{StaticResource DisabledControlLightColor}" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Border" Property="BorderBrush">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{DynamicResource DisabledBorderLightColor}" />
                                    </Setter.Value>

                                </Setter>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />

                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LB_horizontal"
TargetType="ListBox">
            <Setter Property="SnapsToDevicePixels"
   Value="true" />
            <Setter Property="OverridesDefaultStyle"
   Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
   Value="Hidden" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
   Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll"
   Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                            <ScrollViewer Margin="0" Focusable="false">
                                <WrapPanel Orientation="Horizontal" MaxWidth="{TemplateBinding ActualWidth}" Margin="2" IsItemsHost="True" HorizontalAlignment="Center"  />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{StaticResource DisabledControlLightColor}" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Border" Property="BorderBrush">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{DynamicResource DisabledBorderLightColor}" />
                                    </Setter.Value>

                                </Setter>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />

                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LB_vertical"
TargetType="ListBox">
            <Setter Property="SnapsToDevicePixels"
   Value="true" />
            <Setter Property="OverridesDefaultStyle"
   Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
   Value="Hidden" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
   Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll"
   Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                            <ScrollViewer Margin="0" Focusable="false">
                                <StackPanel Orientation="Vertical" Width="{TemplateBinding ActualWidth}" Margin="2" IsItemsHost="True" />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />

                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

        <Style x:Key="LB_verticalNoScroll" TargetType="ListBox">
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                            <StackPanel Orientation="Vertical" Width="{TemplateBinding ActualWidth}" Margin="2" IsItemsHost="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" Value="{DynamicResource DarkBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--<Style x:Key="{x:Type ListBoxItem}"
TargetType="ListBoxItem">
            <Setter Property="SnapsToDevicePixels"
   Value="true" />
            <Setter Property="OverridesDefaultStyle"
   Value="true" />
            <Setter Property="Margin" Value="10,10,10,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border x:Name="Border" Padding="0" Margin="0,0,10,0" SnapsToDevicePixels="true" CornerRadius="10" BorderThickness="2" BorderBrush="Transparent">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent" />
                            </Border.Background>
                            <ContentPresenter x:Name="content"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False"/>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color" To="{x:Static SystemParameters.WindowGlassColor}"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color" To="{x:Static SystemParameters.WindowGlassColor}"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        --><!--PATH-->
        <!--========================================--><!--
        <Style TargetType="Path" x:Key="DefaultPath">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                    <Setter Property="Fill" Value="{DynamicResource DarkBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                    <Setter Property="Fill" Value="{DynamicResource LightMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                    <Setter Property="Fill" Value="{DynamicResource ThemeMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        --><!--RADIOBUTTONS-->
        <!--========================================-->
        <Style TargetType="RadioButton" x:Key="CheckableRB" >
            <Setter Property="FontFamily" Value="{StaticResource Nunito}" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Padding" Value="10,6" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Name="bdr_btn_cc" CornerRadius="15" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <Grid>
                                <Border x:Name="bg" Opacity="0.2" CornerRadius="15" />
                                <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <Path Margin="1,1,15,0" Width="9" Height="10" HorizontalAlignment="Right" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="2" Data="M -0.5 4 L 3 8 8 0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="#7f8c8d" />
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="bg" Value="{DynamicResource AccentBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="Transparent" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource DarkForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="Transparent" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeMenu}" />
                                <Setter Property="BorderBrush" TargetName="bdr_btn_cc" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="bdr_btn_cc" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--TOOLTIP-->
        <!--========================================--><!--
        <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="HasDropShadow" Value="True" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToolTip">
                        <Border Name="Border" BorderThickness="1.5">
                            <ContentPresenter x:Name="content" Margin="4" HorizontalAlignment="Left" VerticalAlignment="Top" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" Value="true">
                                <Setter TargetName="Border" Property="CornerRadius" Value="5" />
                                <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="1">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DarkMenu}" />
                                <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="0">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource LightForeground}" />
                                <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static prop:AppSettings.Default}, Path=ThemeMode}" Value="2">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeForeground}" />
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeBackground}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ThemeForeground}" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

    </Application.Resources>
</Application>
